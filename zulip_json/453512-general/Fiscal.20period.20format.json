[
    {
        "content": "<p>I need to express \"fiscal {month,quarter,year}\" compactly, e.g. in a database column or HTTP endpoint. I've done some literature research. <a href=\"https://cloud.google.com/looker/docs/reference/param-model-fiscal-month-offset\">Looker uses fiscal_month_offset</a>, which seems as good a standard as any. But there's nothing on storage/transfer formats. I'm considering these:</p>\n<div class=\"codehilite\"><pre><span></span><code># [u-...] inspired by Temporal API\n2024[u-fmo=-7]    = 2023-06-01 - 2024-05-31\n2025Q2[u-fmo=+3]  = 2025-07-01 - 2026-09-30\n2040M10[u-fmo=-5] = 2040-05-01 - 2040-05-31\n\n# I picked ~ somewhat arbitrarily as a delimiter\nFY2024~-7   = 2023-06-01 - 2024-05-31\nFY2025Q2~+3 = 2025-07-01 - 2026-09-30\n2040M10~-5  = 2040-05-01 - 2040-05-31\n\n# The {...} sets off the month offset visually\n2024{-7}    = 2023-06-01 - 2024-05-31\n2025Q2{3}   = 2025-07-01 - 2026-09-30\n2040M10{-5} = 2040-05-01 - 2040-05-31\n</code></pre></div>\n<p>Does anyone have a favorite? Another idea?</p>",
        "id": 494718140,
        "sender_full_name": "James A Rosen",
        "timestamp": 1737349015
    },
    {
        "content": "<p>I'm tempted to say: just store the start and end dates in your database, and use code to convert to and from the fiscal year format.</p>",
        "id": 494718669,
        "sender_full_name": "Nabeel S",
        "timestamp": 1737349322
    },
    {
        "content": "<p>I certainly could do that. One key downside is size.</p>\n<p>I can store <code>fiscal_year</code> and <code>fiscal_offset</code> in two <code>smallint</code>s for 4 bytes. I can store <code>fiscal_year</code>, <code>fiscal_year_start</code>, and <code>fiscal_year_end</code> in one <code>smallint</code> and two <code>Date</code>s for 10 bytes. On a table with 100,000,000 records, that's an extra 600MB at minimum -- more, depending on how well I <a href=\"https://postgres.fm/episodes/column-tetris\">play column Tetris</a>. (I could omit <code>fiscal_year</code>, but by not storing it, I can't partition on it.)</p>\n<p>I'm going to have to convert one way or the other in queries that need to compare fiscal and calendar periods.</p>\n<p>If I store <code>(fiscal_year, fiscal_month_offset)</code>, I need to convert to query by calendar year</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">events</span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">fiscal_year</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">calendar_year_to_fiscal</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">fiscal_year</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">calendar_year_to_fiscal</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>Whereas  if I store <code>(calendar_start, calendar_end)</code>, I need to convert to query by fiscal year:</p>\n<div class=\"codehilite\" data-code-language=\"SQL\"><pre><span></span><code><span class=\"k\">select</span><span class=\"w\"> </span><span class=\"o\">*</span>\n<span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">events</span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">calendar_start</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">fiscal_year_start</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"k\">and</span><span class=\"w\"> </span><span class=\"n\">calendar_end</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">fiscal_year_end</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 494887794,
        "sender_full_name": "James A Rosen",
        "timestamp": 1737396938
    },
    {
        "content": "<p>If regular dates will make your life easier, and if the only downside of two dates is size, I would say double check if that's really a downside at all:</p>\n<ul>\n<li>10 bytes might feel like a lot, but a) what's the size of the rest of the data in the column? and b) Is 100M rows really something you're going to have?</li>\n<li>DATE takes 3 bytes vs. the 5 bytes of DATETIME, but again I wonder if that consideration is over-optimization.</li>\n</ul>",
        "id": 494920872,
        "sender_full_name": "Nabeel S",
        "timestamp": 1737410586
    },
    {
        "content": "<blockquote>\n<p>100M rows really something you're going to have?</p>\n</blockquote>\n<p>Probably within a few months. Definitely within 12 months.</p>\n<blockquote>\n<p>DATE takes 3 bytes vs. the 5 bytes of DATETIME</p>\n</blockquote>\n<p><a href=\"https://www.postgresql.org/docs/current/datatype-datetime.html\">On Postgres</a>, timestamp is 8B, timestamp with time zone is 8B, and date is 4B.</p>",
        "id": 494934211,
        "sender_full_name": "James A Rosen",
        "timestamp": 1737417090
    },
    {
        "content": "<p>I still don't think saving 300MB is going to be your main concern on a 100GB database :-)</p>",
        "id": 494941104,
        "sender_full_name": "Nabeel S",
        "timestamp": 1737420167
    },
    {
        "content": "<p>Fair. Thank you for taking the time to make a suggestion. I appreciate the assist.</p>",
        "id": 494946394,
        "sender_full_name": "James A Rosen",
        "timestamp": 1737422839
    }
]