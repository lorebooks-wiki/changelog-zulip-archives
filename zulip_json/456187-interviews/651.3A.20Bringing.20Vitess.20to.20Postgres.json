[
    {
        "content": "<p>Sugu Sougoumarane, creator of Vitess, comes off sabbatical to bring Vitess to Postgres. We discuss what motivated Sugu to come off sabbatical, why now is the time, the technical challenges of doing so, the implementation details of Multigres (Vitess for Postgres). We also discuss the state of Postgres at scale. <span aria-label=\"link\" class=\"emoji emoji-1f517\" role=\"img\" title=\"link\">:link:</span> <a href=\"https://changelog.fm/651\">https://changelog.fm/651</a></p>\n<table>\n<thead>\n<tr>\n<th>Ch</th>\n<th>Start</th>\n<th>Title</th>\n<th>Runs</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>01</td>\n<td><a href=\"https://changelog.fm/651#t=0\">00:00</a></td>\n<td>This week on The Changelog</td>\n<td>01:01</td>\n</tr>\n<tr>\n<td>02</td>\n<td><a href=\"https://changelog.fm/651#t=61\">01:01</a></td>\n<td><a href=\"https://depot.dev\">Sponsor: Depot</a></td>\n<td>02:18</td>\n</tr>\n<tr>\n<td>03</td>\n<td><a href=\"https://changelog.fm/651#t=199\">03:19</a></td>\n<td>Start the show!</td>\n<td>03:43</td>\n</tr>\n<tr>\n<td>04</td>\n<td><a href=\"https://changelog.fm/651#t=422\">07:02</a></td>\n<td>Why sabatical?</td>\n<td>03:37</td>\n</tr>\n<tr>\n<td>05</td>\n<td><a href=\"https://changelog.fm/651#t=640\">10:40</a></td>\n<td>What is Vitess?</td>\n<td>04:13</td>\n</tr>\n<tr>\n<td>06</td>\n<td><a href=\"https://changelog.fm/651#t=893\">14:53</a></td>\n<td>From side project at YouTube to full-on company</td>\n<td>03:43</td>\n</tr>\n<tr>\n<td>07</td>\n<td><a href=\"https://changelog.fm/651#t=1115\">18:35</a></td>\n<td>Where is Vitess for Postgres?</td>\n<td>04:23</td>\n</tr>\n<tr>\n<td>08</td>\n<td><a href=\"https://changelog.fm/651#t=1379\">22:59</a></td>\n<td>Sugu's Ah ha! moment</td>\n<td>04:42</td>\n</tr>\n<tr>\n<td>09</td>\n<td><a href=\"https://changelog.fm/651#t=1661\">27:41</a></td>\n<td>Explaining Keyspace ID in Vitess</td>\n<td>06:48</td>\n</tr>\n<tr>\n<td>10</td>\n<td><a href=\"https://changelog.fm/651#t=2069\">34:29</a></td>\n<td><a href=\"https://www.coderabbit.ai\">Sponsor: CodeRabbit</a></td>\n<td>02:44</td>\n</tr>\n<tr>\n<td>11</td>\n<td><a href=\"https://changelog.fm/651#t=2232\">37:12</a></td>\n<td>What's different?</td>\n<td>04:03</td>\n</tr>\n<tr>\n<td>12</td>\n<td><a href=\"https://changelog.fm/651#t=2475\">41:15</a></td>\n<td>Does this compromise Postgres for life?</td>\n<td>01:56</td>\n</tr>\n<tr>\n<td>13</td>\n<td><a href=\"https://changelog.fm/651#t=2591\">43:11</a></td>\n<td>Porting Vitess to Multigres</td>\n<td>06:38</td>\n</tr>\n<tr>\n<td>14</td>\n<td><a href=\"https://changelog.fm/651#t=2989\">49:49</a></td>\n<td>What are your marching orders?</td>\n<td>01:19</td>\n</tr>\n<tr>\n<td>15</td>\n<td><a href=\"https://changelog.fm/651#t=3068\">51:08</a></td>\n<td>Are you writting this in Go?</td>\n<td>01:59</td>\n</tr>\n<tr>\n<td>16</td>\n<td><a href=\"https://changelog.fm/651#t=3187\">53:07</a></td>\n<td>Building the team</td>\n<td>01:05</td>\n</tr>\n<tr>\n<td>17</td>\n<td><a href=\"https://changelog.fm/651#t=3252\">54:12</a></td>\n<td>Implementing Multigres</td>\n<td>02:45</td>\n</tr>\n<tr>\n<td>18</td>\n<td><a href=\"https://changelog.fm/651#t=3417\">56:57</a></td>\n<td>Multigres to Supabase</td>\n<td>06:38</td>\n</tr>\n<tr>\n<td>19</td>\n<td><a href=\"https://changelog.fm/651#t=3815\">1:03:35</a></td>\n<td>Unburdened by past decisions</td>\n<td>03:57</td>\n</tr>\n<tr>\n<td>20</td>\n<td><a href=\"https://changelog.fm/651#t=4052\">1:07:32</a></td>\n<td>State of Postgres at scale</td>\n<td>06:03</td>\n</tr>\n<tr>\n<td>21</td>\n<td><a href=\"https://changelog.fm/651#t=4415\">1:13:35</a></td>\n<td><a href=\"https://changelog.com/live\">LIVE IN DENVER!!</a></td>\n<td>01:38</td>\n</tr>\n</tbody>\n</table>",
        "id": 530451059,
        "sender_full_name": "Logbot",
        "timestamp": 1753314907
    },
    {
        "content": "<p>This was such a great episode. I was left in awe of what Sugu accomplished and also that Google gave him three months of thinking time on a project.</p>\n<p>Best of luck to the team.</p>\n<p>BTW no mention of cockroach db.</p>",
        "id": 531951276,
        "sender_full_name": "Tim Uckun",
        "timestamp": 1753918934
    },
    {
        "content": "<p>Loved this episode as well. Had no idea YouTube was using MySql at that scale.</p>",
        "id": 532122613,
        "sender_full_name": "Don MacKinnon",
        "timestamp": 1753980300
    },
    {
        "content": "<p>I’m pretty sure I mentioned Cockroach but I think it was brief and closer to the end.</p>",
        "id": 532459117,
        "sender_full_name": "Adam Stacoviak",
        "timestamp": 1754144882
    },
    {
        "content": "<p>CockroachDB is great but almost no developer chooses it for a new project due to lack of awareness of it. Everyone thinks PostgreSQL or MySQL and their respective clustering programs.</p>",
        "id": 532561354,
        "sender_full_name": "Matthew Sanabria",
        "timestamp": 1754230553
    },
    {
        "content": "<p>There is also yugabyte which you never heard about even though it's been around a long time.</p>\n<p>Perhaps possible guests for the podcasts.</p>",
        "id": 532603566,
        "sender_full_name": "Tim Uckun",
        "timestamp": 1754257929
    },
    {
        "content": "<p>Yeah Yugabyte too. TiDB too.</p>",
        "id": 532613492,
        "sender_full_name": "Matthew Sanabria",
        "timestamp": 1754264829
    },
    {
        "content": "<p>i was extremely interested in CockroachDB until they changed the licence</p>\n<p>and i understand why teams/companies do it, but it pretty much kills the project instantly for me</p>",
        "id": 532619635,
        "sender_full_name": "Ron Waldon-Howe",
        "timestamp": 1754268692
    },
    {
        "content": "<p>Tell me about it. One of the reasons I left there.</p>",
        "id": 532767974,
        "sender_full_name": "Matthew Sanabria",
        "timestamp": 1754327853
    },
    {
        "content": "<p>Jerod's \"now do SQLite\" comment reminded me of the production grade, multi-reader/writer, snapshot and serializable homegrown RDBMS with a SQLite query interface and automatic time sharding that Bloomberg has been quietly building for 20 years (8 years since open sourcing): <a href=\"https://github.com/bloomberg/comdb2\">https://github.com/bloomberg/comdb2</a></p>\n<p>It's not Vitess for SQLite (the commonalities with SQLite don't go much further than the query interface). Also, I don't know of anyone else who's adopted it, let alone any support offerings. And Bloomberg owns the roadmap and will do what they want with it.</p>\n<p>But still, I feel like it's an interesting piece of database tech that's rarely discussed. If it had come out of a startup that had IPO'd with a bunch of engineers flush with seed funding, I expect it would've spawned at least one commercial company.</p>",
        "id": 532803268,
        "sender_full_name": "Andrew O'Brien",
        "timestamp": 1754344448
    },
    {
        "content": "<p>Very cool, thanks for sharing.  I need to listen to this episode as we’re currently looking at how we can improve write latency from our other fulfilment centres.  We can’t shard all of our data due to data residency constraints.  I’ve been looking at implementing something like Turso to act as a stateful write through cache with a service that synchronises back to our London DB, but no matter how I’m trying to slice this pie it’s very complex.  Vitess was also on my radar, however we use MariaDB so I’m not entirely sure on compatibility, though I’ve seen MariaDB has GalleraCluster mode which looks similar.</p>\n<p>Also toying with the idea of seeing how much latency we can save just by leveraging AWS backbone, but the speed of light will only get you so far!</p>",
        "id": 532930760,
        "sender_full_name": "Alex Sims",
        "timestamp": 1754404586
    },
    {
        "content": "<p>Combdb2 sounds interesting and still being actively developed. It's amazing I have never even heard of it.</p>\n<p>There are several projects that give you distributed sqlite.</p>\n<p><a href=\"https://github.com/rqlite/rqlite\">https://github.com/rqlite/rqlite</a><br>\n<a href=\"https://fly.io/docs/litefs/\">https://fly.io/docs/litefs/</a><br>\n<a href=\"https://canonical.com/dqlite\">https://canonical.com/dqlite</a><br>\n<a href=\"https://turso.tech/\">https://turso.tech/</a></p>\n<p>I don't know how they all deal with sharding though. Turso does allow you to create as many databases as you want but of course you need to manage them in the app.</p>\n<p>Big sigh from me is that none of them support ruby as an official supported language.</p>",
        "id": 532996082,
        "sender_full_name": "Tim Uckun",
        "timestamp": 1754431581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"755905\">@Tim Uckun</span> aren’t most of them SQLite extensions? How would you need support for a specific language?</p>",
        "id": 533043044,
        "sender_full_name": "Dustin",
        "timestamp": 1754466227
    },
    {
        "content": "<p>I suppose it depends on if they depart from the file format that is compatible with existing libsqlite and/or per-language bindings</p>",
        "id": 533053743,
        "sender_full_name": "Ron Waldon-Howe",
        "timestamp": 1754470010
    },
    {
        "content": "<p>E.g. I think turso will read SQLite files, but writes a new format to support the new features it adds on top<br>\nSo, for e.g. Ruby, you'd need Ruby bindings to libturso or something</p>",
        "id": 533053931,
        "sender_full_name": "Ron Waldon-Howe",
        "timestamp": 1754470076
    },
    {
        "content": "<p>rqlite and dqlite are daemons that sit in front of sqlite to manage the cluster, I am not sure exactly how litefs works. Turso has their own libsql which is sqlite compatible.  They have a ruby wrapper but it didn't work with rails when I tried it even though it worked with a plain old ruby script.</p>\n<p>Turso is also rewriting sqlite from scratch but they are not done with that effort yet.</p>",
        "id": 533181904,
        "sender_full_name": "Tim Uckun",
        "timestamp": 1754515592
    },
    {
        "content": "<p>If I understand correctly, LiteFS is transparent to the SQLite library in your application. It thinks it’s writing to a file as usual, but the replication is happening in the FUSE filesystem, which captures the write ahead log for replication before passing it along to the normal file system to actually write the changes. <a href=\"https://fly.io/docs/litefs/how-it-works/\">https://fly.io/docs/litefs/how-it-works/</a></p>",
        "id": 533202978,
        "sender_full_name": "Andrew O'Brien",
        "timestamp": 1754530680
    },
    {
        "content": "<p>Sounds kind of like DRBD.</p>\n<p>Anyway this is what they say on the first page </p>\n<blockquote>\n<p><strong>Important:</strong> We are not able to provide support or guidance for this product. Use with caution.</p>\n</blockquote>",
        "id": 533215599,
        "sender_full_name": "Tim Uckun",
        "timestamp": 1754541516
    }
]